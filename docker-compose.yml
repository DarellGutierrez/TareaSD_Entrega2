services:
  generador:
    build: ./generador_trafico
    volumes:
      - ./dataset:/app/dataset #vincular el directorio donde se ubica el dataset al directorio /app del contenedor
      - ./generador_trafico:/app #introducir el directorio entero dentro de docker para poder ejecutar el script directamente
    depends_on:
      - cache
    networks:
      - appnet

  cache:
    build: ./cache
    ports:
      - "8000:8000"
    volumes:
      - ./db_manager/db_manager.py:/app/db_manager.py
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_MAXMEMORY=4mb
      - REDIS_POLICY=allkeys-lfu
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      score:
        condition: service_started
    networks:
      - appnet
    restart: always

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - appnet
  score:
    environment: 
      GOOGLE_API_KEY: tukeydeapidegemini  #colocar key de api de gemini para realizar consultas
      GEMINI_MODEL: gemini-2.5-flash-lite
      MOCK_GEMINI: 0  #cambiar a 1 para probar rendimiento de cache, salt√°ndo las consultas a gemini
    build: ./score
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./dataset:/app/dataset #vincular el directorio donde se ubica el dataset al directorio /app del contenedor
      - ./db_manager/db_manager.py:/app/db_manager.py
      - ./score:/app  #para poder acceder al score.py dentro del docker sin actualizar
    networks:
      - appnet

  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: db_consultas
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - appnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d db_consultas"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  appnet:

volumes:
  db_data: